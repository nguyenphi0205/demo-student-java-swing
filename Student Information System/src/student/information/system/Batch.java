/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package student.information.system;


import java.awt.Dimension;
import java.awt.Toolkit;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Calendar;
/**
 *
 * @author nguyenphi
 */
public class Batch extends javax.swing.JFrame {
Connection conn=null;
ResultSet rs=null;
PreparedStatement pst=null;
 java.util.Date date = new java.util.Date();
    String nexttime = null;
    String currentDate = 1900 + date.getYear() + "-" + (date.getMonth() + 1) + "-" + date.getDate();
    String currentDatetime = 1900 + date.getYear() + "-" + (date.getMonth() + 1) + "-" + date.getDate() + " " + date.getHours() + ":" + date.getMinutes() + ":" + date.getSeconds();

    /**
     * Creates new form Major
     */
    public Batch() {
        initComponents();
             conn = db.java_db();
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        setLocation(size.width / 2 - getWidth() / 2,
                size.height / 2 - getHeight() / 2);
        currentDate();
        Update_table();

        txt_emp.setText(String.valueOf(Emp.empId).toString());
    }
  public void currentDate() {

        Calendar cal = new GregorianCalendar();
        int month = cal.get(Calendar.MONTH);
        int year = cal.get(Calendar.YEAR);
        int day = cal.get(Calendar.DAY_OF_MONTH);

        lbl_date.setText((month + 1) + "/" + day + "/" + year);

        //Time
        int second = cal.get(Calendar.SECOND);
        int minute = cal.get(Calendar.MINUTE);
        int hour = cal.get(Calendar.HOUR);

        lbl_time.setText(hour + ":" + (minute) + ":" + second);

    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txt_stuID = new javax.swing.JTextField();
        txt_majorname = new javax.swing.JTextField();
        txt_lec = new javax.swing.JTextField();
        txt_batchID = new javax.swing.JTextField();
        txt_startday = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txt_endday = new javax.swing.JTextField();
        btnback = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        Major_table = new javax.swing.JTable();
        txt_emp = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txt_search = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        lbl_date = new javax.swing.JMenu();
        lbl_time = new javax.swing.JMenu();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setText("MAJOR");

        jLabel2.setText("Student ID");

        jLabel3.setText("batch Name");

        jLabel4.setText("Batch ID");

        jLabel5.setText("Start day");

        jLabel6.setText("Lecturer_name");

        txt_batchID.setEditable(false);

        jButton1.setText("create");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("update");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("clear");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("delete");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel7.setText("End day");

        btnback.setText("Back");
        btnback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbackActionPerformed(evt);
            }
        });

        Major_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Major_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Major_tableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(Major_table);

        txt_emp.setText("emp");

        jLabel10.setText("Logged in As :");

        jLabel8.setText("Search major name");

        txt_search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_searchKeyReleased(evt);
            }
        });

        lbl_date.setText("Date");
        jMenuBar1.add(lbl_date);

        lbl_time.setText("Time");
        jMenuBar1.add(lbl_time);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(195, 195, 195)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_emp)
                        .addGap(99, 99, 99))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnback)
                        .addGap(87, 87, 87))))
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 742, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 12, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txt_lec))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addGap(18, 18, 18)
                                    .addComponent(txt_majorname, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(txt_stuID, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(172, 172, 172)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txt_startday, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                                    .addComponent(txt_endday)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(txt_batchID, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButton3)
                                .addGap(30, 30, 30)
                                .addComponent(jButton4))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(18, 18, 18)
                                .addComponent(jButton2)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txt_emp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnback)
                    .addComponent(jLabel8)
                    .addComponent(txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel3))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(txt_stuID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4)
                                    .addComponent(txt_batchID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txt_majorname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5)
                                    .addComponent(txt_startday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jButton1))
                        .addGap(22, 22, 22)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_endday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(txt_lec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(49, 49, 49))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton3)
                            .addComponent(jButton4))
                        .addGap(59, 59, 59))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
 txt_stuID.setText("");
        txt_endday.setText("");
        txt_lec.setText("");
        txt_batchID.setText("");
        txt_majorname.setText("");
        txt_startday.setText("");
        
        
// TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
  int p = JOptionPane.showConfirmDialog(null, "Are you sure you want to add record?", "Add Record", JOptionPane.YES_NO_OPTION);
        if (p == 0) {
            //check required,length major name
            if (txt_majorname.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "Batch name not null !");
                txt_majorname.requestFocus();
                return;
            }
           if (CheckFrom.checkID1(txt_majorname.getText()) == false & CheckFrom.checkID2(txt_majorname.getText()) == false) {

                JOptionPane.showMessageDialog(this, "Batch name  must GTXXXXX or GCXXXXX .X is numberic and x 5 number !");

                txt_majorname.requestFocus();
                return;
            }

            //check required,length surname
            if (txt_lec.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "lecture name not null !");

                txt_lec.requestFocus();
                return;
            }
            if (txt_lec.getText().length() > 20) {
                JOptionPane.showMessageDialog(this, "lecture must < 20 characters !");

                txt_lec.requestFocus();
                return;
            }

            //validate date 
            if (txt_startday.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Start day is required", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (!txt_startday.getText().trim().matches("^[0-9]{4}[-]{1}[0-9]{1,2}[-]{1}[0-9]{1,2}$")) {
                JOptionPane.showMessageDialog(this, "start day not true, format is yyyy-mm-dd", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (txt_startday.getText() != null) {
                String currentDoB = txt_startday.getText();
                int yearTest = 0;
                int monthTest = 0;
                int dayTest = 0;
                StringTokenizer stn = new StringTokenizer(currentDoB, "-");
                int count = 0;
                while (stn.hasMoreTokens()) {
                    if (count == 0) {
                        yearTest = Integer.valueOf(stn.nextToken());
                    }
                    if (count == 1) {
                        monthTest = Integer.valueOf(stn.nextToken());
                    }
                    if (count == 2) {
                        dayTest = Integer.valueOf(stn.nextToken());
                    }
                    count++;
                }
                if (monthTest >= 13) {
                    JOptionPane.showMessageDialog(this, "tháng không có 13 ", "ERROR", JOptionPane.ERROR_MESSAGE);
                    txt_startday.setText("");
                    txt_startday.requestFocus();
                    return;
                }
                if (dayTest >= 32) {
                    JOptionPane.showMessageDialog(this, "không có ngày 32 ", "ERROR", JOptionPane.ERROR_MESSAGE);
                    txt_startday.setText("");
                    txt_startday.requestFocus();
                    return;
                }
                switch (monthTest) {
                    case 1:
                    case 3:
                    case 5:
                    case 7:
                    case 8:
                    case 10:
                    case 12: {
                        if (dayTest > 31) {
                            JOptionPane.showMessageDialog(this, "tháng này không có ngày 32", "ERROR", JOptionPane.ERROR_MESSAGE);
                            txt_startday.setText("");
                            txt_startday.requestFocus();
                            return;
                        }
                        break;
                    }
                    case 4:
                    case 6:
                    case 9:
                    case 11:
                        if (dayTest > 30) {
                            JOptionPane.showMessageDialog(this, "tháng này không có ngày 31", "ERROR", JOptionPane.ERROR_MESSAGE);
                            txt_startday.setText("");
                            txt_startday.requestFocus();
                            return;
                        }
                        break;

                    case 2: {
                        if (yearTest % 4 == 0) {
                            if (dayTest > 29) {
                                JOptionPane.showMessageDialog(this, "Start day Not True", "ERROR", JOptionPane.ERROR_MESSAGE);
                                txt_startday.setText("");
                                txt_startday.requestFocus();
                                return;
                            }
                        } else if (dayTest > 28) {
                            JOptionPane.showMessageDialog(this, "Start day Not True", "ERROR", JOptionPane.ERROR_MESSAGE);
                            txt_startday.setText("");
                            txt_startday.requestFocus();
                            return;
                        }
                        break;

                    }

                    default: {
                        JOptionPane.showMessageDialog(this, "Start day Not True", "ERROR", JOptionPane.ERROR_MESSAGE);
                        txt_startday.setText("");
                        txt_startday.requestFocus();
                        return;
                    }

                }
                if (yearTest > (date.getYear() + 1900)) {
                    JOptionPane.showMessageDialog(this, "Start day Not True", "ERROR", JOptionPane.ERROR_MESSAGE);
                    txt_startday.setText("");
                    return;
                }
                if (yearTest == (date.getYear() + 1900)) {
                    if (monthTest > (date.getMonth() + 1)) {
                        JOptionPane.showMessageDialog(this, "Start day Not True", "ERROR", JOptionPane.ERROR_MESSAGE);
                        txt_startday.setText("");
                        return;
                    }
                    if (monthTest == (date.getMonth() + 1)) {
                        if (dayTest > (date.getDay())) {
                            JOptionPane.showMessageDialog(this, "Start day Not True", "ERROR", JOptionPane.ERROR_MESSAGE);
                            txt_startday.setText("");
                            return;
                        }
                    }
                }
//             tron 18 tuoi
//                if ((date.getYear() + 1900) - yearTest < 18) {
//                    JOptionPane.showMessageDialog(this, "The Age Not Enought 18", "ERROR", JOptionPane.ERROR_MESSAGE);
//                    txt_dob.setText("");
//                    return;
//                } else if (((date.getYear() + 1900) - yearTest) == 18) {
////                xet monthTest nho hon thang sinh thi error, neu bang`thi xet dayTest
//                    if (monthTest < date.getMonth() + 1) {
//                        JOptionPane.showMessageDialog(this, "The Age Not Enought 18", "ERROR", JOptionPane.ERROR_MESSAGE);
//                        txt_dob.setText("");
//                        return;
//                    } else if (monthTest == date.getMonth() + 1) {
//                        if (date.getDate() > dayTest) {
//                            JOptionPane.showMessageDialog(this, "The Age Not Enought 18", "ERROR", JOptionPane.ERROR_MESSAGE);
//                            txt_dob.setText("");
//                            return;
//                        }
//                    }
//                }

            }

               if (txt_endday.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "End day is required", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (!txt_endday.getText().trim().matches("^[0-9]{4}[-]{1}[0-9]{1,2}[-]{1}[0-9]{1,2}$")) {
                JOptionPane.showMessageDialog(this, "End day not true, format is yyyy-mm-dd", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (txt_endday.getText() != null) {
                String currentDoB = txt_endday.getText();
                int yearTest = 0;
                int monthTest = 0;
                int dayTest = 0;
                StringTokenizer stn = new StringTokenizer(currentDoB, "-");
                int count = 0;
                while (stn.hasMoreTokens()) {
                    if (count == 0) {
                        yearTest = Integer.valueOf(stn.nextToken());
                    }
                    if (count == 1) {
                        monthTest = Integer.valueOf(stn.nextToken());
                    }
                    if (count == 2) {
                        dayTest = Integer.valueOf(stn.nextToken());
                    }
                    count++;
                }
                if (monthTest >= 13) {
                    JOptionPane.showMessageDialog(this, "tháng không có 13 ", "ERROR", JOptionPane.ERROR_MESSAGE);
                    txt_endday.setText("");
                    txt_endday.requestFocus();
                    return;
                }
                if (dayTest >= 32) {
                    JOptionPane.showMessageDialog(this, "không có ngày 32 ", "ERROR", JOptionPane.ERROR_MESSAGE);
                    txt_endday.setText("");
                    txt_endday.requestFocus();
                    return;
                }
                switch (monthTest) {
                    case 1:
                    case 3:
                    case 5:
                    case 7:
                    case 8:
                    case 10:
                    case 12: {
                        if (dayTest > 31) {
                            JOptionPane.showMessageDialog(this, "tháng này không có ngày 32", "ERROR", JOptionPane.ERROR_MESSAGE);
                            txt_endday.setText("");
                            txt_endday.requestFocus();
                            return;
                        }
                        break;
                    }
                    case 4:
                    case 6:
                    case 9:
                    case 11:{
                        if (dayTest > 30) {
                            JOptionPane.showMessageDialog(this, "tháng này không có ngày 31", "ERROR", JOptionPane.ERROR_MESSAGE);
                            txt_endday.setText("");
                            txt_endday.requestFocus();
                            return;
                        }
                        break;
                    }
                    case 2: {
                        if (yearTest % 4 == 0) {
                            if (dayTest > 29) {
                                JOptionPane.showMessageDialog(this, "End day Not True", "ERROR", JOptionPane.ERROR_MESSAGE);
                                txt_endday.setText("");
                                txt_endday.requestFocus();
                                return;
                            }
                        } else if (dayTest > 28) {
                            JOptionPane.showMessageDialog(this, "End day Not True", "ERROR", JOptionPane.ERROR_MESSAGE);
                            txt_endday.setText("");
                            txt_endday.requestFocus();
                            return;
                        }
                        break;

                    }

                    default: {
                        JOptionPane.showMessageDialog(this, "End day Not True", "ERROR", JOptionPane.ERROR_MESSAGE);
                        txt_endday.setText("");
                        txt_endday.requestFocus();
                        return;
                    }

                }
                if (yearTest > (date.getYear() + 1900)) {
                    JOptionPane.showMessageDialog(this, "End day Not True", "ERROR", JOptionPane.ERROR_MESSAGE);
                    txt_endday.setText("");
                    return;
                }
                if (yearTest == (date.getYear() + 1900)) {
                    if (monthTest > (date.getMonth() + 1)) {
                        JOptionPane.showMessageDialog(this, "End day Not True", "ERROR", JOptionPane.ERROR_MESSAGE);
                        txt_endday.setText("");
                        return;
                    }
                    if (monthTest == (date.getMonth() + 1)) {
                        if (dayTest > (date.getDay())) {
                            JOptionPane.showMessageDialog(this, "End day Not True", "ERROR", JOptionPane.ERROR_MESSAGE);
                            txt_endday.setText("");
                            return;
                        }
                    }
                }
//                if (txt_endday.getText().length()>txt_startday.getText().length()) {
//                    JOptionPane.showMessageDialog(this, "End day Not must > start day ", "ERROR", JOptionPane.ERROR_MESSAGE);
//                        txt_endday.setText("");
//                        return;
//                }
            //check eamil
          
              if (txt_stuID.getText()
                    .equals("")) {
                JOptionPane.showMessageDialog(this, "student id not null !");
                //ms_address.setText("Address must < 100 characters !");
                txt_stuID.requestFocus();
                return;
            }
            if (CheckFrom.checkID1(txt_stuID.getText()) == false & CheckFrom.checkID2(txt_stuID.getText()) == false) {

                JOptionPane.showMessageDialog(this, "student id must GTXXXXX or GCXXXXX .X is numberic and x 5 number !");

                txt_stuID.requestFocus();
                return;
            }
              try {
                String sql ="Insert into Batch values(?,?,?,?,?)";

                pst = conn.prepareStatement(sql);
                pst.setString(1, txt_majorname.getText());
                pst.setString(2, txt_endday.getText());
                pst.setString(3, txt_startday.getText());
                pst.setString(4, txt_lec.getText());
                pst.setString(5, txt_stuID.getText());
                
//                pst.setString(10, txt_apt.getText());
//                pst.setString(11, txt_courseid.getText());
//                pst.setString(12, txt_courseid1.getText());
//                pst.setString(13, txt_me.getText());
//                pst.setString(14, txt_fe.getText());
                pst.execute();
                JOptionPane.showMessageDialog(null, "Data is saved successfully");

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Phải có dữ liệu student");
             
            }

            Date currentDate = GregorianCalendar.getInstance().getTime();
            DateFormat df = DateFormat.getDateInstance();
            String dateString = df.format(currentDate);

            Date d = new Date();
            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
            String timeString = sdf.format(d);

            String value0 = timeString;
            String value1 = dateString;
            String val = txt_emp.getText().toString();
            try {

                String reg = "insert into Audit (emp_id, date, status) values ('" + val + "','" + value0 + " / " + value1 + "','Added Record')";
                pst = conn.prepareStatement(reg);
                pst.execute();

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            } finally {

                try {
                    rs.close();
                    pst.close();

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e);

                }
            }

        }
        
        }
        Update_table();
// TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbackActionPerformed

           int Close = JOptionPane.showConfirmDialog(null, "Are you sure want close !");
        if (Close == 0) {
            this.dispose();
        }// TODO add your handling code here:// TODO add your handling code here:
    }//GEN-LAST:event_btnbackActionPerformed

    private void Major_tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Major_tableMouseClicked
  int row = this.Major_table.getSelectedRow();
        txt_batchID.setText((String) (Major_table.getValueAt(row, 0)).toString());
        txt_majorname.setText((String) (Major_table.getValueAt(row, 1)));
        txt_endday.setText((String) (Major_table.getValueAt(row, 2)));
        txt_startday.setText((String) (Major_table.getValueAt(row, 3)));
//txt_surname.setText((String) (student_table.getValueAt(row, 5)));
        txt_lec.setText((String) (Major_table.getValueAt(row, 4)));
       txt_stuID.setText((String) (Major_table.getValueAt(row, 5)));
       // txt_address.setText((String) (student_table.getValueAt(row, 6)));
        // TODO add your handling code here:
    }//GEN-LAST:event_Major_tableMouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
   int p = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete record?", "Delete", JOptionPane.YES_NO_OPTION);
        if (p == 0) {
            Date currentDate = GregorianCalendar.getInstance().getTime();
            DateFormat df = DateFormat.getDateInstance();
            String dateString = df.format(currentDate);

            Date d = new Date();
            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
            String timeString = sdf.format(d);

            String value0 = timeString;
            String value1 = dateString;
            String val = txt_emp.getText().toString();
            try {
                String reg = "insert into Audit (emp_id, date, status) values ('" + val + "','" + value0 + " / " + value1 + "','Deleted Record')";
                pst = conn.prepareStatement(reg);
                pst.execute();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
            String sql = "delete from Batch where Batch_Id=? ";
            try {
                pst = conn.prepareStatement(sql);
                pst.setString(1, txt_batchID.getText());
                pst.execute();

                JOptionPane.showMessageDialog(null, "Record Deleted");

            } catch (Exception e) {

                JOptionPane.showMessageDialog(null, e);
            } finally {

                try {
                    rs.close();
                    pst.close();

                } catch (Exception e) {

                }
            }
            Update_table();

        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
 int p = JOptionPane.showConfirmDialog(null, "Are you sure you want to update?", "Update Record", JOptionPane.YES_NO_OPTION);
        if (p == 0) {

            try {

                String value1 = txt_batchID.getText();
                String value2 = txt_majorname.getText();
                String value3 = txt_endday.getText();
                String value4 = txt_startday.getText();
                String value5 = txt_lec.getText();
                String value6 = txt_stuID.getText();
               // String value7 = txt_address.getText();
            //    String value9 = txt_add2.getText();
               // String value10 = txt_apt.getText();
             //   String value11 = txt_pc.getText();
//                String value12 = txt_courseid.getText();
//                String value13 = txt_courseid1.getText();
//                String value14 = txt_me.getText();
//                String value15 = txt_fe.getText();
//                String sql= "update Student_Information set id='"+value4+"',first_name='"+value1+"', surname='"+value2+"', "
//                        + "Dob='"+value3+"',Email='"+value5+"',Telephone='"+value6+"',Address='"+value7+"',Batch= '"+value9+"', "
//                        + "Exam='"+value10+"',Post_code ='"+value11+"''"where id='"+value4+"'";
                String sql = "update  Batch set  Batch_name='"+value2+"' ,End_day='"+value3+"' ,Start_day='"+value4+"' ,Lecture_name='"+value5+"',Student_ID='"+value6+"'  WHERE Batch_Id='"+value1+"'";
                pst = conn.prepareStatement(sql);
                pst.execute();
                JOptionPane.showMessageDialog(null, "Record Updated");

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Phỉa có dữ liệu student");
            }

            Date currentDate = GregorianCalendar.getInstance().getTime();
            DateFormat df = DateFormat.getDateInstance();
            String dateString = df.format(currentDate);

            Date d = new Date();
            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
            String timeString = sdf.format(d);

            String value0 = timeString;
            String values = dateString;
            String val = txt_emp.getText().toString();
            try {
                String reg = "insert into Audit (emp_id, date, status) values ('" + val + "','" + value0 + " / " + values + "','Updated Record')";
                pst = conn.prepareStatement(reg);
                pst.execute();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            } finally {

                try {
                    rs.close();
                    pst.close();

                } catch (Exception e) {

                }
            }
            Update_table();
        }
        
// TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void txt_searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_searchKeyReleased
 try {
            String sql = "Select * from Batch where Batch_name like ? ";
//            String sql = "select * from Student_Information where [Student_ID]=? ";

            pst = conn.prepareStatement(sql);
            pst.setString(1, "%" + txt_search.getText().trim() + "%");
            rs = pst.executeQuery();
            Major_table.setModel(net.proteanit.sql.DbUtils.resultSetToTableModel(rs));
 }
  catch (Exception e) {

        } finally {

            try {

                rs.close();
                pst.close();

            } catch (Exception e) {
                e.printStackTrace();
            }
 }
// TODO add your handling code here:
    }//GEN-LAST:event_txt_searchKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Batch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Batch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Batch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Batch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Batch().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Major_table;
    private javax.swing.JButton btnback;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JMenu lbl_date;
    private javax.swing.JMenu lbl_time;
    private javax.swing.JTextField txt_batchID;
    private javax.swing.JLabel txt_emp;
    private javax.swing.JTextField txt_endday;
    private javax.swing.JTextField txt_lec;
    private javax.swing.JTextField txt_majorname;
    private javax.swing.JTextField txt_search;
    private javax.swing.JTextField txt_startday;
    private javax.swing.JTextField txt_stuID;
    // End of variables declaration//GEN-END:variables

    private void Update_table() {
        
         try {
            String sql = "select * from Batch";
            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();
            Major_table.setModel(net.proteanit.sql.DbUtils.resultSetToTableModel(rs));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        } finally {

            try {
                rs.close();
                pst.close();

            } catch (Exception e) {

            }
        }
    }
}
